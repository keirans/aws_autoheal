AWSTemplateFormatVersion: "2010-09-09"

Description: All in one Autoheal pattern demonstration

Parameters: 
  VolumeDevice: 
    Type: String
    Default: '/dev/xvdb'
    Description: The device file to associate the volume with on the host
  AvailabilityZone: 
    Type: String
    Default: 'a'
    Description: The AZ character the region
  Owner: 
    Type: String
    Default: 'Autoheal Demo Stack'
    Description: The value of the Owner Tag for tagged resources
  KeyName: 
    Type: String
    Default: 'Keiran-OSX'
    Description: The SSH Key Name that is already present in the target account
  ComponentName:
    Type: String
    Default: 'Autoheal'
    Description: The value of the ComponentName tag for all resources
  ComponentOwner:
    Type: String
    Default: 'Keiran'
    Description: The value of the ComponentOwner tag for all resources
  InstanceType:
    Type: String
    Default: 't2.micro'
    Description: The instance type to be used for the Autoheal instance

Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: PV64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    m1.small:
      Arch: PV64
    m1.medium:
      Arch: PV64
    m1.large:
      Arch: PV64
    m1.xlarge:
      Arch: PV64
    m2.xlarge:
      Arch: PV64
    m2.2xlarge:
      Arch: PV64
    m2.4xlarge:
      Arch: PV64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    c1.medium:
      Arch: PV64
    c1.xlarge:
      Arch: PV64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVMG2
    g2.8xlarge:
      Arch: HVMG2
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64

  AWSInstanceType2NATArch:
    t1.micro:
      Arch: NATPV64
    t2.nano:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64
    t2.medium:
      Arch: NATHVM64
    t2.large:
      Arch: NATHVM64
    m1.small:
      Arch: NATPV64
    m1.medium:
      Arch: NATPV64
    m1.large:
      Arch: NATPV64
    m1.xlarge:
      Arch: NATPV64
    m2.xlarge:
      Arch: NATPV64
    m2.2xlarge:
      Arch: NATPV64
    m2.4xlarge:
      Arch: NATPV64
    m3.medium:
      Arch: NATHVM64
    m3.large:
      Arch: NATHVM64
    m3.xlarge:
      Arch: NATHVM64
    m3.2xlarge:
      Arch: NATHVM64
    m4.large:
      Arch: NATHVM64
    m4.xlarge:
      Arch: NATHVM64
    m4.2xlarge:
      Arch: NATHVM64
    m4.4xlarge:
      Arch: NATHVM64
    m4.10xlarge:
      Arch: NATHVM64
    c1.medium:
      Arch: NATPV64
    c1.xlarge:
      Arch: NATPV64
    c3.large:
      Arch: NATHVM64
    c3.xlarge:
      Arch: NATHVM64
    c3.2xlarge:
      Arch: NATHVM64
    c3.4xlarge:
      Arch: NATHVM64
    c3.8xlarge:
      Arch: NATHVM64
    c4.large:
      Arch: NATHVM64
    c4.xlarge:
      Arch: NATHVM64
    c4.2xlarge:
      Arch: NATHVM64
    c4.4xlarge:
      Arch: NATHVM64
    c4.8xlarge:
      Arch: NATHVM64
    g2.2xlarge:
      Arch: NATHVMG2
    g2.8xlarge:
      Arch: NATHVMG2
    r3.large:
      Arch: NATHVM64
    r3.xlarge:
      Arch: NATHVM64
    r3.2xlarge:
      Arch: NATHVM64
    r3.4xlarge:
      Arch: NATHVM64
    r3.8xlarge:
      Arch: NATHVM64
    i2.xlarge:
      Arch: NATHVM64
    i2.2xlarge:
      Arch: NATHVM64
    i2.4xlarge:
      Arch: NATHVM64
    i2.8xlarge:
      Arch: NATHVM64
    d2.xlarge:
      Arch: NATHVM64
    d2.2xlarge:
      Arch: NATHVM64
    d2.4xlarge:
      Arch: NATHVM64
    d2.8xlarge:
      Arch: NATHVM64
    hi1.4xlarge:
      Arch: NATHVM64
    hs1.8xlarge:
      Arch: NATHVM64
    cr1.8xlarge:
      Arch: NATHVM64
    cc2.8xlarge:
      Arch: NATHVM64
      
  AWSRegionArch2AMI:
    us-east-1:
      PV64: ami-2a69aa47
      HVM64: ami-97785bed
      HVMG2: ami-0a6e3770
    us-west-2:
      PV64: ami-7f77b31f
      HVM64: ami-f2d3638a
      HVMG2: ami-ee15a196
    us-west-1:
      PV64: ami-a2490dc2
      HVM64: ami-824c4ee2
      HVMG2: ami-0da4a46d
    eu-west-1:
      PV64: ami-4cdd453f
      HVM64: ami-d834aba1
      HVMG2: ami-af8013d6
    eu-west-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-403e2524
      HVMG2: NOT_SUPPORTED
    eu-west-3:
      PV64: NOT_SUPPORTED
      HVM64: ami-8ee056f3
      HVMG2: NOT_SUPPORTED
    eu-central-1:
      PV64: ami-6527cf0a
      HVM64: ami-5652ce39
      HVMG2: ami-1d58ca72
    ap-northeast-1:
      PV64: ami-3e42b65f
      HVM64: ami-ceafcba8
      HVMG2: ami-edfd658b
    ap-northeast-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-863090e8
      HVMG2: NOT_SUPPORTED
    ap-northeast-3:
      PV64: NOT_SUPPORTED
      HVM64: ami-83444afe
      HVMG2: NOT_SUPPORTED
    ap-southeast-1:
      PV64: ami-df9e4cbc
      HVM64: ami-68097514
      HVMG2: ami-c06013bc
    ap-southeast-2:
      PV64: ami-63351d00
      HVM64: ami-942dd1f6
      HVMG2: ami-85ef12e7
    ap-south-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-531a4c3c
      HVMG2: ami-411e492e
    us-east-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-f63b1193
      HVMG2: NOT_SUPPORTED
    ca-central-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-a954d1cd
      HVMG2: NOT_SUPPORTED
    sa-east-1:
      PV64: ami-1ad34676
      HVM64: ami-84175ae8
      HVMG2: NOT_SUPPORTED
    cn-north-1:
      PV64: ami-77559f1a
      HVM64: ami-cb19c4a6
      HVMG2: NOT_SUPPORTED
    cn-northwest-1:
      PV64: ami-80707be2
      HVM64: ami-3e60745c
      HVMG2: NOT_SUPPORTED


Resources:

  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: 'Autoheal Demo VPC'
        - Key: ComponentName
          Value: !Ref ComponentName
        - Key: ComponentOwner
          Value: !Ref ComponentOwner

  PublicSubnetA:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: myVPC
        CidrBlock: 10.0.5.0/24
        AvailabilityZone: !Join
          - ''
          - - !Ref AWS::Region
            - !Ref AvailabilityZone
        Tags:
          - Key: ComponentName
            Value: !Ref ComponentName
          - Key: ComponentOwner
            Value: !Ref ComponentOwner
          - Key: "Name"
            Value: "Autoheal Demo PublicSubnetA"

  myInternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties: 
      Tags:
        - Key: Name
          Value: "Autoheal Demo IGW"
        - Key: "ComponentName"
          Value: !Ref ComponentName
        - Key: "ComponentOwner"
          Value: !Ref ComponentOwner

  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties: 
      InternetGatewayId:
        Ref: myInternetGateway
      VpcId: 
        Ref: myVPC

  PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: myVPC
        Tags:
          - Key: Name
            Value: "Autoheal Demo Route Table"
          - Key: ComponentName
            Value: !Ref ComponentName
          - Key: ComponentOwner
            Value: !Ref ComponentOwner
          - Key: Name
            Value: Public Route Table

  PublicSubnetRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: myInternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetA
      RouteTableId:
        Ref: PublicRouteTable

  AutohealSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties: 
      GroupName: AutohealSecurityGroup
      GroupDescription: Autoheal Security Group
      VpcId:
        Ref: myVPC
      SecurityGroupIngress:
        - 
          IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: "Autoheal Demo security group"
        - Key: ComponentName
          Value: !Ref ComponentName
        - Key: ComponentOwner
          Value: !Ref ComponentOwner

  AutoHealEIP:
    Type: "AWS::EC2::EIP"
    DependsOn:
      - AttachGateway
    Properties:
      Domain: !Ref myVPC


  AutohealVolume:
    Type: "AWS::EC2::Volume"
    Properties:
      AvailabilityZone: !Join
          - ''
          - - !Ref AWS::Region
            - !Ref AvailabilityZone
      Size: 1
      Tags:
        - Key: Name
          Value: "Autoheal Demo volume"
        - Key: ComponentName
          Value: !Ref ComponentName
        - Key: ComponentOwner
          Value: !Ref ComponentOwner


  AutohealLaunchConfig:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      AssociatePublicIpAddress: false
      ImageId:
        !FindInMap
          - AWSRegionArch2AMI
          - !Ref AWS::Region
          - !FindInMap
            - AWSInstanceType2Arch
            - !Ref InstanceType
            - Arch
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - Ref: AutohealSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          export EBSVOLUME=${VolumeDevice}
          export EBSMOUNTPOINT='/data'
          export EBSSLEEPPERIOD=10
          export EBSWAITS=6
          export EBSCOUNTS=0

          echo "[Autoheal - Cloud Init] - Starting Autoheal cloud init actions"
          while true
          do
            if [ ${!EBSCOUNTS} -lt ${!EBSWAITS} ]; then
              echo "[Autoheal - Cloud Init] - Waiting for EBS Device ${!EBSVOLUME} at attempt ${!EBSCOUNTS}"
              if [ ! -b ${!EBSVOLUME} ]; then
                echo "[Autoheal - Cloud Init] - EBS Volume device file not found - Sleeping for ${!EBSSLEEPPERIOD}"
                export EBSCOUNTS=$(( ${!EBSCOUNTS} + 1 ))
                sleep ${!EBSSLEEPPERIOD}
              else
                echo "[Autoheal - Cloud Init] - EBS Volume device file found - Continuing"
                break
              fi
            else
              echo "[Autoheal - Cloud Init] - EBS Volume has not become ready after ${!EBSCOUNTS} with a sleep of ${!EBSSLEEPPERIOD} - Cannot continue"
              exit 1
            fi
          done

          export FSTYPE=`lsblk -no FSTYPE ${!EBSVOLUME}`
          if [ -z ${!FSTYPE} ]; then
            echo "[Autoheal - Cloud Init] - EBS Volume appears to have no filesystem - Creating it"
            mkfs.ext4 ${!EBSVOLUME}
          else
            echo "[Autoheal - Cloud Init] - EBS Volume has a filesystem present of ${!FSTYPE}"
            echo "[Autoheal - Cloud Init] - Continuing to mount phase"
          fi

          sleep 5
          export MOUNTFSTYPE=`lsblk -no FSTYPE ${!EBSVOLUME}`
          echo "[Autoheal - Cloud Init] - Mounting ${!EBSVOLUME} at ${!EBSMOUNTPOINT} with ${!MOUNTFSTYPE}"
          mkdir -p ${!EBSMOUNTPOINT}
          mount -t ${!MOUNTFSTYPE} ${!EBSVOLUME} ${!EBSMOUNTPOINT}

          echo "[Autoheal - Cloud Init] - End of Autoheal cloud init actions"

  AutohealGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones:
        - !Join
          - ''
          - - !Ref AWS::Region
            - !Ref AvailabilityZone
      DesiredCapacity: 0
      LaunchConfigurationName: !Ref AutohealLaunchConfig
      MetricsCollection:
        - Granularity: 1Minute
      MaxSize: 0
      MinSize: 0
      Tags:
        - Key: Name
          Value: "Autoheal Demo Autoscale group"
          PropagateAtLaunch: false
        - Key: ComponentName
          Value: !Ref ComponentName
          PropagateAtLaunch: true
        - Key: ComponentOwner
          Value: !Ref ComponentOwner
          PropagateAtLaunch: true
      VPCZoneIdentifier:
        - !Ref PublicSubnetA

  DeviceAttachmentHook: 
    Type: "AWS::AutoScaling::LifecycleHook"
    Properties: 
      AutoScalingGroupName: !Ref AutohealGroup
      LifecycleTransition: "autoscaling:EC2_INSTANCE_LAUNCHING"

  EventRule: 
    Type: "AWS::Events::Rule"
    Properties: 
      Description: "EventRule"
      EventPattern: 
        source: 
          - "aws.autoscaling"
        detail-type: 
          - "EC2 Instance-launch Lifecycle Action"
        detail: 
          AutoScalingGroupName: 
            - !Ref AutohealGroup
      State: "ENABLED"
      Targets: 
        - 
          Arn: !GetAtt DeviceAttachment.Arn 
          Id : !Ref DeviceAttachment


  PermissionForEventsToInvokeLambda: 
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref DeviceAttachment
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "EventRule"
          - "Arn"

  DeviceAttachmentRole: 
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: "root"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action:
                  - "ec2:DescribeInstanceStatus"
                  - "ec2:DescribeInstances"
                Resource:  
                  - "*"
              - 
                Effect: "Allow"
                Action:
                  - "ec2:AttachVolume"
                  - "ec2:DetachVolume"
                Resource:  
                  - !Join
                    - ''
                    - - 'arn:aws:ec2:'
                      - !Ref AWS::Region
                      - ':'
                      - !Ref AWS::AccountId
                      - ':volume/'
                      - !Ref AutohealVolume
                  - !Join 
                    - ''
                    - - 'arn:aws:ec2:'
                      - !Ref AWS::Region
                      - ':'
                      - !Ref AWS::AccountId
                      - ':instance/*'
              - 
                Effect: "Allow"
                Action: "ec2:AssociateAddress"
                Resource: "*"
              - 
                Effect: Allow
                Action:
                   - autoscaling:SetDesiredCapacity
                   - autoscaling:UpdateAutoScalingGroup
                   - autoscaling:CompleteLifecycleAction
                Resource: !Join
                  - ''
                  - - 'arn:aws:autoscaling:'
                    - !Ref AWS::Region
                    - ':'
                    - !Ref AWS::AccountId
                    - ':autoScalingGroup:'
                    - '*:'
                    - 'autoScalingGroupName/'
                    - !Ref AutohealGroup
              - 
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource: "arn:aws:logs:*:*:*"       

  DeviceAttachment: 
    Type: "AWS::Lambda::Function"
    Properties:
      Tags:
        - Key: Name
          Value: "Autoheal Demo device attachment lambda"
        - Key: ComponentName
          Value: !Ref ComponentName
        - Key: ComponentOwner
          Value: !Ref ComponentOwner
      Runtime: python3.6
      Environment:
        Variables: 
          VolumeID : !Ref AutohealVolume
          VolumeDevice: !Ref VolumeDevice
          EIPAddress: !Ref AutoHealEIP
          EIPAllocationID: !GetAtt AutoHealEIP.AllocationId

      Timeout: 30
      Handler: index.lambda_handler
      Role: !GetAtt DeviceAttachmentRole.Arn
      Code: 
        ZipFile: |
          import boto3, json, logging, time, os
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):

            result = dict(event)
            
            logger.info('Executing the Device Attachment Lambda')
            logger.info(event)
            logger.info("Attaching " +  os.environ.get('VolumeID') + " to instance " + result['detail']['EC2InstanceId'] + " as device " + os.environ.get('VolumeDevice'))
            logger.info("Associating " + os.environ.get('EIPAddress') + " to instance " + result['detail']['EC2InstanceId'])

            ec2 = boto3.resource('ec2')
            logger.info('Polling the instance to become ready')
            instance = ec2.Instance(result['detail']['EC2InstanceId'])
            while instance.state['Name'] not in ('running', 'stopped'):
              logger.info('Instance is not yet ready - Sleeping 5 seconds')
              sleep(5)
              instance.load()

            logger.info('Instance is in a ready state - Commencing additional actions')
            logger.info('Commencing the Volume attachment action')            
            volume = ec2.Volume(os.environ.get('VolumeID'))
            response = volume.attach_to_instance(
              Device=os.environ.get('VolumeDevice'),
              InstanceId=result['detail']['EC2InstanceId'],
              DryRun=False
            )

            logger.info('Commencing the EIP association')
            eipclient = boto3.client('ec2')
            eipresponse = eipclient.associate_address(
              AllocationId=os.environ.get('EIPAllocationID'),
              InstanceId=result['detail']['EC2InstanceId'],
            )


            logger.info('Completing the Lifecyle action')
            client = boto3.client('autoscaling')

            autoscalingresponse = client.complete_lifecycle_action(
              AutoScalingGroupName=result['detail']['AutoScalingGroupName'],
              LifecycleActionResult='CONTINUE',
              LifecycleActionToken=result['detail']['LifecycleActionToken'],
              LifecycleHookName=result['detail']['LifecycleHookName'],
              InstanceId=result['detail']['EC2InstanceId'],
           )

            logger.info(autoscalingresponse)

            return autoscalingresponse


  AutohealScaleup:
    Type: "AWS::Lambda::Function"
    Properties:
      Runtime: python3.6
      Tags:
        - Key: Name
          Value: "Autoheal Demo Autoscale group scale up lambda"
        - Key: ComponentName
          Value: !Ref ComponentName
        - Key: ComponentOwner
          Value: !Ref ComponentOwner
      Environment:
        Variables:
          AutohealGroup: !Ref AutohealGroup
      Timeout: 30
      Handler: index.lambda_handler
      Role: !GetAtt DeviceAttachmentRole.Arn
      Code:
        ZipFile: |
          import boto3, json, logging, time, os
          from botocore.vendored import requests

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def sendResponse(event, context, responseStatus, responseData, physicalResourceId=None):
                responseUrl = event['ResponseURL']

                print(responseUrl)

                responseBody = {
                    'Status': responseStatus,
                    'Reason': 'See the details in CloudWatch Log Stream: ' + \
                        context.log_stream_name,
                    'PhysicalResourceId': physicalResourceId or context.log_stream_name,
                    'StackId': event['StackId'],
                    'RequestId': event['RequestId'],
                    'LogicalResourceId': event['LogicalResourceId'],
                    'Data': responseData
                }

                json_responseBody = json.dumps(responseBody)

                print("Response body:\n" + json_responseBody)

                headers = {
                    'content-type': '',
                    'content-length': str(len(json_responseBody))
                }

                try:
                    response = requests.put(responseUrl,
                                            data=json_responseBody,
                                            headers=headers)
                    print("Status code: " + response.reason)
                except Exception as e:
                    print("sendResponse(..) failed executing requests.put(..): " + str(e))

          def lambda_handler(event, context):

            result = dict(event)
            logger.info("Hello from the Autoheal scale up Lambda")

            responseStatus = 'SUCCESS'
            responseData = {}

            if result['RequestType'] == 'Create' :
              logger.info('Got CREATE - Setting the Autoheal ASG to 1')
              logger.info("Sending post response to " + result['ResponseURL'])

              client = boto3.client('autoscaling')
              response = client.update_auto_scaling_group(
                AutoScalingGroupName=os.environ.get('AutohealGroup'),
                MinSize=1,
                MaxSize=1,
               DesiredCapacity=1,
              )

              sendResponse(event, context, responseStatus, responseData)

              return response

            elif result['RequestType'] == 'Update' :
              logger.info('Got UPDATE - Setting the Autoheal ASG to 1')
              logger.info("Sending post response to " + result['ResponseURL'])

              client = boto3.client('autoscaling')
              response = client.update_auto_scaling_group(
                AutoScalingGroupName=os.environ.get('AutohealGroup'),
                MinSize=1,
                MaxSize=1,
               DesiredCapacity=1,
              )

              sendResponse(event, context, responseStatus, responseData)

              return response


            elif result['RequestType'] == 'Delete':
              logger.info('Got DELETE - Taking no action')
              logger.info("Sending post response to " + result['ResponseURL'])

              sendResponse(event, context, responseStatus, responseData)

              return response

            else:
              logger.info("Got " + result['RequestType'] + " This is unknown - Taking no action")

              return response

  ScaleupAutohealAction: 
    Type: "Custom::ScaleupAutoheal"
    DependsOn: 
      - AutohealGroup
      - PermissionForEventsToInvokeLambda
      - DeviceAttachment
      - EventRule
      - DeviceAttachmentHook
      - AutohealVolume
    Properties:
      ServiceToken: !GetAtt AutohealScaleup.Arn
  
Outputs:
  ElasticIP:
    Value: !Ref AutoHealEIP
